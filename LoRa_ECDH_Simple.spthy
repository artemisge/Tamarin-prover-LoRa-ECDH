theory LoRa_ECDH
begin

builtins: hashing, symmetric-encryption, asymmetric-encryption, signing, bilinear-pairing

section{* LoRa_ECDH *}

functions: PRF/1, hmac/2 [private]

// Device Initialization
rule Device_Init:
    [Fr(~DevLtk)]
  --[]->
    [
      !Ltk($ED, ~DevLtk), 
      !Pk($ED, pk(~DevLtk)),
      EDInitialised($ED),
      Out(pk(~DevLtk))
    ]

// Network Server
rule NS_Init:
    [Fr(~NSLtk)] 
  --[]->
    [
      !Ltk($NS, ~NSLtk), 
      !Pk($NS, pk(~NSLtk)), 
      Out(pk(~NSLtk)), 
      NSInitialised($NS)
    ]

// Application Server
rule AS_Init:
    [Fr(~ASLtk)]
  --[]->
    [
      !Ltk($AS, ~ASLtk), 
      !Pk($AS, pk(~ASLtk)), 
      Out(pk(~ASLtk)), 
      ASInitialised($AS)
    ]

// ED doesn't have a "!" to ensure that it will be connected with only one pair of servers.
// On the other hand, servers can be connected to other EDs.
rule Connect_All:
    [ 
      Fr(~AppKey),

      EDInitialised($ED),
      NSInitialised($NS),
      ASInitialised($AS)

      //DevNonce

      //!Pk($ED, pkD),
      //!Pk($NS, pkNS),
      //!Pk($AS, pkAS)
    ]
  --[]->
  // PSKs shared as facts, not to the channel
    [
      EDCommissioned($ED, $NS, $AS, ~AppKey), 
      NSCommissioned($ED, $NS, $AS, ~AppKey),
      ASCommissioned($ED, $NS, $AS)
    ]

// Device Join Request to Network Server
rule Device_1:
  let
    MIC1 = hmac('Join_Request', AppKey)
    //DevNoncei = hmac(DevNonce) + '1'
  in
    [
      Fr(~DevNonce), 
      EDCommissioned($ED, $NS, $AS, AppKey)

      //!Pk($ED, pkD),
      //!Pk($NS, pkNS),
      //!Pk($AS, pkAS)
    ]
  --[Dev1()]->
    [
      Out(<'Join_Request',
          $AS,
          $ED,
          ~DevNonce,
          MIC1
          >),
      Device1($ED, $NS, $AS, AppKey, ~DevNonce)
    ]

// 'params' = extra parameters that don't matter
// NS receives Join Request message from Device
// Sends back Join Accept
// Sends new key to AS to establish a session between Dev-AS
rule NtwServer_1:
  let
    MIC1 = hmac('Join_Request', AppKey)
    //DevNoncei = hmac(DevNonce) + '1'
    AppNoncei = h(~AppNonce, DevNonce)

    // generates two session keys AppSKey and NwkSKey 
    NtwSKey = senc(<'1', AppNoncei, 'NetID', DevNonce>, AppKey)
    AppSKey = senc(<'2', AppNoncei, 'NetID', DevNonce>, AppKey)

    // prepares for the network serverâ€™s i-th nonce AppNoncei by eXclusive-ORing a 
    // randomly generated nonce AppNonce with the received DevNoncei
    MIC2 = hmac('Join_Accept', AppKey)
    //Join_Accept = <AppNoncei, 'NetID', 'DevAddr', 'RFU', 'RxDelay', 'CFList', MIC2>
    Join_Accept = <AppNoncei, 'details', MIC2>
  in
    [
      NSCommissioned($ED, $NS, $AS, AppKey), 
      In(<'Join_Request',
          $AS,
          $ED,
          DevNonce,
          MIC1
          >), 

      !Pk($ED, pkD),
      !Pk($NS, pkNS),
      !Pk($AS, pkAS),

      Fr(~AppNonce), 
      Fr(~Key1), 
      Fr(~Key2)
    ]
  --[
      NetworkServer1()
    ]->
    [
      Out(<'Join_Accept',
          senc(Join_Accept, AppKey)
          >), 

      Network1($ED, $NS, $AS, ~AppNonce), 
      Out(AppSKey)
    ]

// Device receives Join Accept message from NS
rule Device_2:
  let
    // server messages:      
    MIC2 = hmac('Join_Accept', AppKey)
    Join_Accept = <AppNoncei, 'details', MIC2>

    NtwSKey = senc(<'1', AppNoncei, 'NetID', DevNonce>, AppKey)
    AppSKey = senc(<'2', AppNoncei, 'NetID', DevNonce>, AppKey)
    
    DP_d = pmult(~d, 'G') // corresponding public key
    Seq1 = h(AppSKey)    
    MIC3 = hmac('App_Auth_Req', AppSKey)
    App_Auth_Req = <Seq1, DP_d, $AS, $ED, MIC3>
  in
  // d: ECDH private key andpublic key: DP_d = d*G, G starting/base point
    [
      In(<'Join_Accept',
          senc(Join_Accept, AppKey)
          >), 

      Device1($ED, $NS, $AS, AppKey, DevNonce),
      Fr(~d) // private key randomly generated
    ]
  --[
      Dev2()
    ]->
    [
      Out(<'App_Auth_Req', App_Auth_Req>), 
      Device2($ED, $NS, $AS, ~d, DP_d, Seq1, AppSKey)
    ]

// PR_app : Private key of the application server
// MIC4: digital signature, that's why it's signed by private key of App server, and it's not meant to be decrypted, only verified.
rule AppServer_1:
  let    
    App_Auth_Req = <Seq1, DP_d, $AS, $ED, MIC3>
    
    DP_a = pmult(~a, 'G')

    Seq2 = <Seq1,'1'>
    SK = h(pmult(~a, DP_d), Seq2)

    m = h(Seq2, $AS, $ED, DP_d, DP_a, SK)
    MIC4 = aenc(m, ASLtk)
    MIC5 = hmac('App_Auth_Res', AppSKey)

    App_Auth_Res = <Seq2, DP_a, MIC4, MIC5>
  in
    [
      Fr(~a), // private key

      !Ltk($AS, ASLtk),
      ASCommissioned($ED, $NS, $AS), 

      In(AppSKey),
      In(<'App_Auth_Req', App_Auth_Req>)
    ]
  --[
  // TODO: validate Seq1, MIC3
      AppServer1()
    ]->
    [
      Out(<'App_Auth_Res', App_Auth_Res>)
      //State_AS_1($ED, $NS, $AS, ~a, DP_a)
    ]


rule Device_3:
  let
  // App server messages
    App_Auth_Res = <Seq2, DP_a, MIC4, MIC5>

    // Session Key
    SKDev = h(pmult(d, DP_a), Seq2)

    Seq3 = <Seq2, '1'>
    MIC6 = hmac(Seq3, SKDev)
    App_Auth_Ack = <Seq3, MIC6>

    test = pmult(d, DP_a)
  in
    [
      In(<'App_Auth_Res', App_Auth_Res>), 
      !Pk($AS, pkAS),
      Device2($ED, $NS, $AS, d, DP_d, Seq1, AppSKey)
    ]
  --[
  // TODO Eq(Mic5, hmac(AppSKey, App_Auth_Res)) == true
  // validate Mic4 with PU_app: verify(MIC4, m, pk(prk)) = true
  // validate eq(Seq2, Seq1 + '1') == true
      Dev3()
    ]->
    [
      Out(<'App_Auth_Ack'>)//, test>)//App_Auth_Ack>)
    ]


lemma protocol_flow: exists-trace
    "Ex #i #j #k #l #m. 
      Dev1()@i & 
      NetworkServer1()@j &
      Dev2()@k & 
      AppServer1()@l &
      Dev3()@m & 
      #i < #j &
      #j < #k &
      #k < #l & 
      #l < #m
    "
  
end